{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TOP\u30da\u30fc\u30b8 \u3053\u308c\u3092CDK\u3067\u4f5c\u308a\u307e\u3059\u3002","title":"TOP"},{"location":"#top","text":"\u3053\u308c\u3092CDK\u3067\u4f5c\u308a\u307e\u3059\u3002","title":"TOP\u30da\u30fc\u30b8"},{"location":"create-acm/","text":"\u69cb\u6210\u56f3 Certificate Manager\u4f5c\u6210 Certificate Manager\u3067SSL\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u3057\u3001ELB\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067HTTPS\u5316\u3092\u884c\u3044\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_certificatemanager , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 174 175 176 177 178 179 180 181 // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) 214 215 216 217 218 219 const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) 233 234 235 236 237 238 239 240 241 242 243 new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) 178-181\u884c\u76ee SSL\u8a3c\u660e\u66f8\u3092\u4f5c\u6210 214-219\u884c\u76ee ELB\u306bHTTPS\u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0 233-243\u884c\u76ee \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306e\u8ffd\u52a0\u3067\u884c\u3063\u305fAWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9632\u3050\u3068\u540c\u69d8\u3001AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3067\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u306e\u8ee2\u9001\u8a2d\u5b9a CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy AWS\u304cSSL\u8a3c\u660e\u66f8\u3092\u7121\u6599\u3067\u767a\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u7c21\u5358\u306bHTTPS\u5316\u304c\u3067\u304d\u307e\u3057\u305f\u3002 HTTPS\u5316\u3057\u305f\u5834\u5408\u3001WordPress\u306b\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u3001\u6b21\u306e\u624b\u9806\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_certificatemanager , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"HTTPS\u5316(AWS\u306e\u8a2d\u5b9a)"},{"location":"create-acm/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-acm/#certificate-manager","text":"Certificate Manager\u3067SSL\u8a3c\u660e\u66f8\u3092\u4f5c\u6210\u3057\u3001ELB\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067HTTPS\u5316\u3092\u884c\u3044\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_certificatemanager , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 174 175 176 177 178 179 180 181 // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) 214 215 216 217 218 219 const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) 233 234 235 236 237 238 239 240 241 242 243 new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) 178-181\u884c\u76ee SSL\u8a3c\u660e\u66f8\u3092\u4f5c\u6210 214-219\u884c\u76ee ELB\u306bHTTPS\u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0 233-243\u884c\u76ee \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306e\u8ffd\u52a0\u3067\u884c\u3063\u305fAWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9632\u3050\u3068\u540c\u69d8\u3001AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3067\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u306e\u8ee2\u9001\u8a2d\u5b9a","title":"Certificate Manager\u4f5c\u6210"},{"location":"create-acm/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy AWS\u304cSSL\u8a3c\u660e\u66f8\u3092\u7121\u6599\u3067\u767a\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u7c21\u5358\u306bHTTPS\u5316\u304c\u3067\u304d\u307e\u3057\u305f\u3002 HTTPS\u5316\u3057\u305f\u5834\u5408\u3001WordPress\u306b\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u3001\u6b21\u306e\u624b\u9806\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"CDK Deploy"},{"location":"create-acm/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_certificatemanager , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-autoscaling/","text":"\u69cb\u6210\u56f3 EC2 Auto Scaling\u4f5c\u6210 \u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3082\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u3088\u3046\u3001Auto Scaling\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u4f5c\u6210\u6e08\u307f\u306eEC2\u3082\u6b8b\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u3068\u3057\u307e\u3057\u305f\u3002 EC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3046 Auto Scaling\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fWordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u884c\u308f\u305a\u3001EFS\u306e\u30de\u30a6\u30f3\u30c8\u306e\u307f\u3092\u884c\u3046 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) 143 144 145 146 147 148 149 150 const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) 116-142\u884c\u76ee Auto Scaling\u30b0\u30eb\u30fc\u30d7\u7528\u306eUser Data\u306e\u4f5c\u6210\uff08WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u90e8\u5206\u304c\u306a\u3044\uff09 144-161\u884c\u76ee Auto Scaling\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210\u3002\u57fa\u672c\u7684\u306b\u306fEC2\u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u306e\u8a2d\u5b9a\u3092\u3001\u30b9\u30dd\u30c3\u30c8\u4fa1\u683c\u3092\u8ffd\u52a0\u3002 163\u884c\u76ee EFS\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306bAuto Scaling\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u8a2d\u5b9a 150\u884c\u76ee ELB\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306bAuto Scaling\u30b0\u30eb\u30fc\u30d7\u3092\u8ffd\u52a0 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u3053\u3053\u307e\u3067\u3067\u304d\u308b\u3068\u3001\u30de\u30eb\u30c1AZ\u69cb\u6210\u306eWordPress\u306e\u69cb\u7bc9\u304c\u6700\u4f4e\u9650\u5b8c\u4e86\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"EC2 Auto Scaling\u3092\u4f5c\u6210"},{"location":"create-autoscaling/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-autoscaling/#ec2-auto-scaling","text":"\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3082\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u3088\u3046\u3001Auto Scaling\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u4f5c\u6210\u6e08\u307f\u306eEC2\u3082\u6b8b\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u3068\u3057\u307e\u3057\u305f\u3002 EC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3046 Auto Scaling\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fWordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u884c\u308f\u305a\u3001EFS\u306e\u30de\u30a6\u30f3\u30c8\u306e\u307f\u3092\u884c\u3046 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) 143 144 145 146 147 148 149 150 const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) 116-142\u884c\u76ee Auto Scaling\u30b0\u30eb\u30fc\u30d7\u7528\u306eUser Data\u306e\u4f5c\u6210\uff08WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u90e8\u5206\u304c\u306a\u3044\uff09 144-161\u884c\u76ee Auto Scaling\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210\u3002\u57fa\u672c\u7684\u306b\u306fEC2\u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u306e\u8a2d\u5b9a\u3092\u3001\u30b9\u30dd\u30c3\u30c8\u4fa1\u683c\u3092\u8ffd\u52a0\u3002 163\u884c\u76ee EFS\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306bAuto Scaling\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u8a2d\u5b9a 150\u884c\u76ee ELB\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306bAuto Scaling\u30b0\u30eb\u30fc\u30d7\u3092\u8ffd\u52a0","title":"EC2 Auto Scaling\u4f5c\u6210"},{"location":"create-autoscaling/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u3053\u3053\u307e\u3067\u3067\u304d\u308b\u3068\u3001\u30de\u30eb\u30c1AZ\u69cb\u6210\u306eWordPress\u306e\u69cb\u7bc9\u304c\u6700\u4f4e\u9650\u5b8c\u4e86\u3067\u3059\u3002","title":"CDK Deploy"},{"location":"create-autoscaling/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-cloudfront-https/","text":"\u69cb\u6210\u56f3 CDN\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u8ffd\u52a0\u3068HTTPS\u5316 CloudFront\u306b\u3082\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3068\u8a3c\u660e\u66f8\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Note CloudFront\u306b\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001SSL\u8a3c\u660e\u66f8\u304c\u5fc5\u9808\u3068\u306a\u308a\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-requirements \u307e\u305f\u3001\u8a3c\u660e\u66f8\u306f\u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u306eCertificate Manager\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30c9\u30e1\u30a4\u30f3\u3068\u8a3c\u660e\u66f8\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u8907\u6570\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u306a\u308b\u305f\u3081\u3001\u4fee\u6b63\u7b87\u6240\u304c\u5897\u3048\u307e\u3059\u3002\uff08\u4e0b\u8a183\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\uff09 \"lib/wordpress-cdk-stack-us-east-1.ts\" \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3092\u65b0\u898f\u4f5c\u6210\u3057\u307e\u3059 wordpress-cdk/lib/wordpress-cdk-stack-us-east-1.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } } 21-24\u884c\u76ee CloudFront\u7528\u306e\u8a3c\u660e\u66f8\u3092\u4f5c\u6210 \"bin/wordpress-cdk.ts\" \u4eca\u307e\u3067\u521d\u671f\u72b6\u614b\u304b\u3089\u5909\u66f4\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u4fee\u6b63\u3057\u307e\u3059\u3002 \u5148\u306b\u4f5c\u6210\u3057\u305f\u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/bin/wordpress-cdk.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); 8-10\u884c\u76ee \u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u3001\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u6210 Note \u4eca\u307e\u3067\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u672a\u6307\u5b9a\u306e\u5834\u5408\u306fAWS\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306b\u6307\u5b9a\u3057\u305f\u30ea\u30fc\u30b8\u30e7\u30f3\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \"lib/wordpress-cdk-stack.ts\" \u6700\u5f8c\u306b\u3044\u3064\u3082\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 178 179 180 181 182 const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) 193 194 195 196 197 198 199 200 201 202 203 204 const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) 278 279 280 281 282 new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); 178-182\u884c\u76ee \u4f5c\u6210\u6e08\u307f\u306e\u8a3c\u660e\u66f8\u3092\u53d6\u5f97 202-204\u884c\u76ee CloudFront\u306b\u30c9\u30e1\u30a4\u30f3\u540d\u3068\u8a3c\u660e\u66f8\u3092\u6307\u5b9a 278-282\u884c\u76ee CloudFront\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306eA\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210 CDK Deploy \u3059\u3079\u3066\u4fee\u6b63\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002 \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u3067 bootstrap \u3092\u884c\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u5b9f\u65bd\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk bootstrap --region us-east-1 \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u306e\u30b9\u30bf\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001 cdk deploy \u6642\u306b\u306f\u4f5c\u6210\u3059\u308b\u30b9\u30bf\u30c3\u30af\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb # \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u30b9\u30bf\u30c3\u30af cdk deploy WordpressCdkUsEast1Stack \u30bf\u30fc\u30df\u30ca\u30eb # \u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u30b9\u30bf\u30c3\u30af cdk deploy WordpressCdkStack Note \u3059\u3079\u3066\u306e\u30b9\u30bf\u30c3\u30af\u3092\u307e\u3068\u3081\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u5834\u5408\u306f cdk deploy --all \u3067\u3082\u53ef\u80fd\u3067\u3059 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 bin/wordpress-cdk.ts lib/wordpress-cdk-stack.ts lib/wordpress-cdk-stack-us-east-1.ts #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } } import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } }","title":"CDN\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u8ffd\u52a0\u3068HTTPS\u5316"},{"location":"create-cloudfront-https/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-cloudfront-https/#cdnhttps","text":"CloudFront\u306b\u3082\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3068\u8a3c\u660e\u66f8\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Note CloudFront\u306b\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001SSL\u8a3c\u660e\u66f8\u304c\u5fc5\u9808\u3068\u306a\u308a\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-requirements \u307e\u305f\u3001\u8a3c\u660e\u66f8\u306f\u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u306eCertificate Manager\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30c9\u30e1\u30a4\u30f3\u3068\u8a3c\u660e\u66f8\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u8907\u6570\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u306a\u308b\u305f\u3081\u3001\u4fee\u6b63\u7b87\u6240\u304c\u5897\u3048\u307e\u3059\u3002\uff08\u4e0b\u8a183\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\uff09 \"lib/wordpress-cdk-stack-us-east-1.ts\" \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3092\u65b0\u898f\u4f5c\u6210\u3057\u307e\u3059 wordpress-cdk/lib/wordpress-cdk-stack-us-east-1.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } } 21-24\u884c\u76ee CloudFront\u7528\u306e\u8a3c\u660e\u66f8\u3092\u4f5c\u6210 \"bin/wordpress-cdk.ts\" \u4eca\u307e\u3067\u521d\u671f\u72b6\u614b\u304b\u3089\u5909\u66f4\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u4fee\u6b63\u3057\u307e\u3059\u3002 \u5148\u306b\u4f5c\u6210\u3057\u305f\u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/bin/wordpress-cdk.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); 8-10\u884c\u76ee \u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u3001\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u6210 Note \u4eca\u307e\u3067\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u672a\u6307\u5b9a\u306e\u5834\u5408\u306fAWS\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u306b\u6307\u5b9a\u3057\u305f\u30ea\u30fc\u30b8\u30e7\u30f3\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \"lib/wordpress-cdk-stack.ts\" \u6700\u5f8c\u306b\u3044\u3064\u3082\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 178 179 180 181 182 const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) 193 194 195 196 197 198 199 200 201 202 203 204 const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) 278 279 280 281 282 new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); 178-182\u884c\u76ee \u4f5c\u6210\u6e08\u307f\u306e\u8a3c\u660e\u66f8\u3092\u53d6\u5f97 202-204\u884c\u76ee CloudFront\u306b\u30c9\u30e1\u30a4\u30f3\u540d\u3068\u8a3c\u660e\u66f8\u3092\u6307\u5b9a 278-282\u884c\u76ee CloudFront\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306eA\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210","title":"CDN\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u8ffd\u52a0\u3068HTTPS\u5316"},{"location":"create-cloudfront-https/#cdk-deploy","text":"\u3059\u3079\u3066\u4fee\u6b63\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002 \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u3067 bootstrap \u3092\u884c\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u5b9f\u65bd\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk bootstrap --region us-east-1 \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u306e\u30b9\u30bf\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001 cdk deploy \u6642\u306b\u306f\u4f5c\u6210\u3059\u308b\u30b9\u30bf\u30c3\u30af\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb # \u30d0\u30fc\u30b8\u30cb\u30a2\u5317\u90e8\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u30b9\u30bf\u30c3\u30af cdk deploy WordpressCdkUsEast1Stack \u30bf\u30fc\u30df\u30ca\u30eb # \u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u5411\u3051\u30b9\u30bf\u30c3\u30af cdk deploy WordpressCdkStack Note \u3059\u3079\u3066\u306e\u30b9\u30bf\u30c3\u30af\u3092\u307e\u3068\u3081\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u5834\u5408\u306f cdk deploy --all \u3067\u3082\u53ef\u80fd\u3067\u3059","title":"CDK Deploy"},{"location":"create-cloudfront-https/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 bin/wordpress-cdk.ts lib/wordpress-cdk-stack.ts lib/wordpress-cdk-stack-us-east-1.ts #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } } import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-cloudfront/","text":"\u69cb\u6210\u56f3 CloudFront\u4f5c\u6210 CDN\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 183 184 185 186 187 188 189 190 191 192 193 194 195 196 // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, }) 282 283 284 new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) 183-196\u884c\u76ee CloudFront\u306e\u4f5c\u6210 \u30aa\u30ea\u30b8\u30f3\u306felb\u306e\u30c9\u30e1\u30a4\u30f3 \u5bfe\u5fdc\u3059\u308bHTTP\u30e1\u30bd\u30c3\u30c9\u306e\u8a2d\u5b9a\uff08allowedMethods\u3001cachedMethods\uff09 \u30d3\u30e5\u30fc\u30ef\u30fc\u30d7\u30ed\u30c8\u30b3\u30eb\u30dd\u30ea\u30b7\u30fc\u306f HTTP and HTTPS \u3001 Redirect HTTP to HTTPS \u3001 HTTPS only \u304b\u3089\u9078\u629e \u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc\u306fAWS\u304c\u7528\u610f\u3057\u3066\u3044\u308b CacheOptimized \u30aa\u30ea\u30b8\u30f3\u30ea\u30af\u30a8\u30b9\u30c8\u30dd\u30ea\u30b7\u30fc\u306f\u30aa\u30ea\u30b8\u30f3\u306b\u8ee2\u9001\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a\uff08AllViewer\u306f\u3059\u3079\u3066\u3092\u8ee2\u9001\uff09 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy CloudFront\u767a\u884c\u306e\u30c9\u30e1\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } }","title":"CDN\u8ffd\u52a0"},{"location":"create-cloudfront/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-cloudfront/#cloudfront","text":"CDN\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 183 184 185 186 187 188 189 190 191 192 193 194 195 196 // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, }) 282 283 284 new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) 183-196\u884c\u76ee CloudFront\u306e\u4f5c\u6210 \u30aa\u30ea\u30b8\u30f3\u306felb\u306e\u30c9\u30e1\u30a4\u30f3 \u5bfe\u5fdc\u3059\u308bHTTP\u30e1\u30bd\u30c3\u30c9\u306e\u8a2d\u5b9a\uff08allowedMethods\u3001cachedMethods\uff09 \u30d3\u30e5\u30fc\u30ef\u30fc\u30d7\u30ed\u30c8\u30b3\u30eb\u30dd\u30ea\u30b7\u30fc\u306f HTTP and HTTPS \u3001 Redirect HTTP to HTTPS \u3001 HTTPS only \u304b\u3089\u9078\u629e \u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc\u306fAWS\u304c\u7528\u610f\u3057\u3066\u3044\u308b CacheOptimized \u30aa\u30ea\u30b8\u30f3\u30ea\u30af\u30a8\u30b9\u30c8\u30dd\u30ea\u30b7\u30fc\u306f\u30aa\u30ea\u30b8\u30f3\u306b\u8ee2\u9001\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a\uff08AllViewer\u306f\u3059\u3079\u3066\u3092\u8ee2\u9001\uff09","title":"CloudFront\u4f5c\u6210"},{"location":"create-cloudfront/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy CloudFront\u767a\u884c\u306e\u30c9\u30e1\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"CDK Deploy"},{"location":"create-cloudfront/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-ec2/","text":"\u69cb\u6210\u56f3 EC2\u4f5c\u6210 EC2\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import { aws_ec2 , aws_iam , CfnOutput , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) } } 20-23\u884c\u76ee \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210\u3057\u300180\u756a\u30dd\u30fc\u30c8\u3092\u958b\u3051\u308b 25-30\u884c\u76ee \u30bb\u30c3\u30b7\u30e7\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u3067EC2\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u306e\u3067\u3001IAM\u30ed\u30fc\u30eb\u3092\u8ffd\u52a0 32-41\u884c\u76ee EC2\u3092\u4f5c\u6210 \u30d1\u30d6\u30ea\u30c3\u30af\u30b5\u30d6\u30cd\u30c3\u30c8\u306b\u914d\u7f6e t3small\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eAmazon Linux 2 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u7c21\u5358\u3067\u3059\u306d LAMP\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30c7\u30d7\u30ed\u30a4\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001Session Manager\u3067EC2\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/session-manager.html \u30bb\u30c3\u30b7\u30e7\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u63a5\u7d9a\u5f8c\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306bLAMP\u69cb\u6210\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html \u307e\u305a\u306f ec2-user \u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb sh-4.2$ sudo su - ec2-user [ec2-user@ip-10-0-57-28 ~]$ \u3053\u3053\u304b\u3089\u306f ec2-user \u3067\u4f5c\u696d\u3057\u307e\u3059 Apache/MariaDB/PHP\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb sudo yum update -y sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 sudo yum install -y httpd mariadb-server Apache\u306e\u8d77\u52d5 sudo systemctl enable httpd sudo systemctl start httpd MariaDB\u306e\u8d77\u52d5 sudo systemctl enable mariadb sudo systemctl start mariadb MariaDB\u306e\u521d\u671f\u8a2d\u5b9a sudo mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): [\u521d\u671f\u72b6\u614b\u3067\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u672a\u8a2d\u5b9a\u306e\u305f\u3081\u3001\u7a7a\u6b04\u3067\u30a8\u30f3\u30bf\u30fc] OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] Y New password: [\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b] Re-enter new password: [\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b] Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] Y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] Y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html WordPress\u306e\u53d6\u5f97 wget https://wordpress.org/latest.tar.gz tar -xzf latest.tar.gz MariaDB\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210 mysql -u root -p CREATE USER 'wordpress-user' @ 'localhost' IDENTIFIED BY 'your_strong_password' ; CREATE DATABASE ` wordpress - db ` ; GRANT ALL PRIVILEGES ON ` wordpress - db ` . * TO \"wordpress-user\" @ \"localhost\" ; FLUSH PRIVILEGES ; exit ; Danger \u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u306f\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Wordpress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb sudo cp -r wordpress/* /var/www/html/ sudo chown -R apache /var/www sudo chgrp -R apache /var/www sudo chmod 2775 /var/www find /var/www -type d -exec sudo chmod 2775 {} \\; find /var/www -type f -exec sudo chmod 0644 {} \\; \u3053\u306e\u5148\u306fEC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u884c\u3044\u307e\u3059\u3002 \u3053\u3053\u304b\u3089\u5148\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002 \u3053\u308c\u3067\u30011\u53f0\u306eEC2\u3067\u306eWordpress\u74b0\u5883\u306e\u69cb\u7bc9\u304c\u3067\u304d\u307e\u3057\u305f\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_iam , CfnOutput , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) } }","title":"EC2\u3092\u4f5c\u6210"},{"location":"create-ec2/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-ec2/#ec2","text":"EC2\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import { aws_ec2 , aws_iam , CfnOutput , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) } } 20-23\u884c\u76ee \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210\u3057\u300180\u756a\u30dd\u30fc\u30c8\u3092\u958b\u3051\u308b 25-30\u884c\u76ee \u30bb\u30c3\u30b7\u30e7\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u3067EC2\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u306e\u3067\u3001IAM\u30ed\u30fc\u30eb\u3092\u8ffd\u52a0 32-41\u884c\u76ee EC2\u3092\u4f5c\u6210 \u30d1\u30d6\u30ea\u30c3\u30af\u30b5\u30d6\u30cd\u30c3\u30c8\u306b\u914d\u7f6e t3small\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eAmazon Linux 2","title":"EC2\u4f5c\u6210"},{"location":"create-ec2/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u7c21\u5358\u3067\u3059\u306d","title":"CDK Deploy"},{"location":"create-ec2/#lamp","text":"\u30c7\u30d7\u30ed\u30a4\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001Session Manager\u3067EC2\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/session-manager.html \u30bb\u30c3\u30b7\u30e7\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u63a5\u7d9a\u5f8c\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306bLAMP\u69cb\u6210\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html \u307e\u305a\u306f ec2-user \u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb sh-4.2$ sudo su - ec2-user [ec2-user@ip-10-0-57-28 ~]$ \u3053\u3053\u304b\u3089\u306f ec2-user \u3067\u4f5c\u696d\u3057\u307e\u3059 Apache/MariaDB/PHP\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb sudo yum update -y sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 sudo yum install -y httpd mariadb-server Apache\u306e\u8d77\u52d5 sudo systemctl enable httpd sudo systemctl start httpd MariaDB\u306e\u8d77\u52d5 sudo systemctl enable mariadb sudo systemctl start mariadb MariaDB\u306e\u521d\u671f\u8a2d\u5b9a sudo mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): [\u521d\u671f\u72b6\u614b\u3067\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u672a\u8a2d\u5b9a\u306e\u305f\u3081\u3001\u7a7a\u6b04\u3067\u30a8\u30f3\u30bf\u30fc] OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] Y New password: [\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b] Re-enter new password: [\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b] Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] Y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] Y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB!","title":"LAMP\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"create-ec2/#wordpress","text":"WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html WordPress\u306e\u53d6\u5f97 wget https://wordpress.org/latest.tar.gz tar -xzf latest.tar.gz MariaDB\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210 mysql -u root -p CREATE USER 'wordpress-user' @ 'localhost' IDENTIFIED BY 'your_strong_password' ; CREATE DATABASE ` wordpress - db ` ; GRANT ALL PRIVILEGES ON ` wordpress - db ` . * TO \"wordpress-user\" @ \"localhost\" ; FLUSH PRIVILEGES ; exit ; Danger \u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u306f\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Wordpress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb sudo cp -r wordpress/* /var/www/html/ sudo chown -R apache /var/www sudo chgrp -R apache /var/www sudo chmod 2775 /var/www find /var/www -type d -exec sudo chmod 2775 {} \\; find /var/www -type f -exec sudo chmod 0644 {} \\; \u3053\u306e\u5148\u306fEC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u884c\u3044\u307e\u3059\u3002 \u3053\u3053\u304b\u3089\u5148\u306f\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002 \u3053\u308c\u3067\u30011\u53f0\u306eEC2\u3067\u306eWordpress\u74b0\u5883\u306e\u69cb\u7bc9\u304c\u3067\u304d\u307e\u3057\u305f\u3002","title":"WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"create-ec2/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_iam , CfnOutput , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-efs/","text":"\u69cb\u6210\u56f3 EFS\u4f5c\u6210 WordPress\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8907\u6570\u306eEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u5171\u6709\u3059\u308b\u305f\u3081\u3001EFS\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 AWS\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u3060\u3051\u3067\u306a\u304f\u3001OS\u4e0a\u306e\u8a2d\u5b9a\u3082\u5fc5\u8981\u3067\u3059\u3002 OS\u306e\u8a2d\u5b9a\u306fUser data\u3067\u884c\u3044\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 16 17 18 19 20 21 22 23 // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) 85 efs . connections . allowDefaultPortFrom ( ec2 ) 20-23\u884c\u76ee EFS\u306e\u4f5c\u6210 50-59\u884c\u76ee EFS\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u3092OS\u306b\u30de\u30a6\u30f3\u30c8 85\u884c\u76ee EFS\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306bEC2\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u8a2d\u5b9a CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk destroy cdk deploy Note WordPress\u306e\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306a\u308b\u306e\u3067\u3001 cdk destroy \u3057\u305f\u5f8c\u3067deploy\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"EFS\u3092\u4f5c\u6210"},{"location":"create-efs/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-efs/#efs","text":"WordPress\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8907\u6570\u306eEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u5171\u6709\u3059\u308b\u305f\u3081\u3001EFS\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 AWS\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u3060\u3051\u3067\u306a\u304f\u3001OS\u4e0a\u306e\u8a2d\u5b9a\u3082\u5fc5\u8981\u3067\u3059\u3002 OS\u306e\u8a2d\u5b9a\u306fUser data\u3067\u884c\u3044\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 16 17 18 19 20 21 22 23 // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) 85 efs . connections . allowDefaultPortFrom ( ec2 ) 20-23\u884c\u76ee EFS\u306e\u4f5c\u6210 50-59\u884c\u76ee EFS\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u3092OS\u306b\u30de\u30a6\u30f3\u30c8 85\u884c\u76ee EFS\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306bEC2\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u8a2d\u5b9a","title":"EFS\u4f5c\u6210"},{"location":"create-efs/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk destroy cdk deploy Note WordPress\u306e\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306a\u308b\u306e\u3067\u3001 cdk destroy \u3057\u305f\u5f8c\u3067deploy\u3057\u307e\u3059\u3002","title":"CDK Deploy"},{"location":"create-efs/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-elb/","text":"\u69cb\u6210\u56f3 ELB\u4f5c\u6210 \u6b21\u306f\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u30fc\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) 129 130 131 new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) 95-103\u884c\u76ee ELB\u306e\u4f5c\u6210 105-110\u884c\u76ee \u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210\u3002 \u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c200\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002WordPress\u306f\u521d\u671f\u8a2d\u5b9a\u524d\u3060\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9301\u3092\u8fd4\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306e\u7bc4\u56f2\u3092200-399\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002 112\u884c\u76ee EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30a4\u30f3\u30d0\u30a6\u30f3\u30c9\u30eb\u30fc\u30eb\u306bELB\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u901a\u4fe1\u3092\u8ffd\u52a0 114-118\u884c\u76ee \u30ea\u30b9\u30ca\u30fc\u306e\u4f5c\u6210 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy ELB\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3001EC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 Info WordPress\u306f\u521d\u671f\u8a2d\u5b9a\u6642\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u8a18\u61b6\u3059\u308b\u3088\u3046\u306a\u306e\u3067\u3001IP\u30a2\u30c9\u30ec\u30b9\u3084\u30c9\u30e1\u30a4\u30f3\u304c\u5909\u308f\u308b\u3068\u518d\u5ea6\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 cdk destroy \u3067\u524a\u9664\u306e\u5f8c\u3001\u518d\u5ea6 cdk deploy \u3059\u308b\u306e\u304c\u78ba\u5b9f\u3067\u3059\u3002\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u304c\u6d88\u3048\u308b\u306e\u3067\u3001WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\uff09 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"ELB\u3092\u4f5c\u6210"},{"location":"create-elb/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-elb/#elb","text":"\u6b21\u306f\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u30fc\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) 129 130 131 new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) 95-103\u884c\u76ee ELB\u306e\u4f5c\u6210 105-110\u884c\u76ee \u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210\u3002 \u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c200\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002WordPress\u306f\u521d\u671f\u8a2d\u5b9a\u524d\u3060\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9301\u3092\u8fd4\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306e\u7bc4\u56f2\u3092200-399\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002 112\u884c\u76ee EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30a4\u30f3\u30d0\u30a6\u30f3\u30c9\u30eb\u30fc\u30eb\u306bELB\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u901a\u4fe1\u3092\u8ffd\u52a0 114-118\u884c\u76ee \u30ea\u30b9\u30ca\u30fc\u306e\u4f5c\u6210","title":"ELB\u4f5c\u6210"},{"location":"create-elb/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy ELB\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3001EC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 Info WordPress\u306f\u521d\u671f\u8a2d\u5b9a\u6642\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u8a18\u61b6\u3059\u308b\u3088\u3046\u306a\u306e\u3067\u3001IP\u30a2\u30c9\u30ec\u30b9\u3084\u30c9\u30e1\u30a4\u30f3\u304c\u5909\u308f\u308b\u3068\u518d\u5ea6\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 cdk destroy \u3067\u524a\u9664\u306e\u5f8c\u3001\u518d\u5ea6 cdk deploy \u3059\u308b\u306e\u304c\u78ba\u5b9f\u3067\u3059\u3002\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u304c\u6d88\u3048\u308b\u306e\u3067\u3001WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\uff09","title":"CDK Deploy"},{"location":"create-elb/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-project/","text":"CDK\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210 \u30bf\u30fc\u30df\u30ca\u30eb mkdir wordpress-cdk cd wordpress-cdk CDK Init Type Script\u3067\u9032\u3081\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk init app --language typescript # Welcome to your CDK TypeScript project This is a blank project for CDK development with TypeScript. The `cdk.json` file tells the CDK Toolkit how to execute your app. ## Useful commands * `npm run build` compile typescript to js * `npm run watch` watch for changes and compile * `npm run test` perform the jest unit tests * `cdk deploy` deploy this stack to your default AWS account/region * `cdk diff` compare deployed stack with current state * `cdk synth` emits the synthesized CloudFormation template Executing npm install... npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated npm WARN deprecated sane@4.1.0: some dependency vulnerabilities fixed, support for node < 10 dropped, and newer ECMAScript syntax/features added \u2705 All done! \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059 \u30bf\u30fc\u30df\u30ca\u30eb tree ./ -I node_modules ./ \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 wordpress-cdk.ts \u251c\u2500\u2500 cdk.json \u251c\u2500\u2500 jest.config.js \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 wordpress-cdk-stack.ts \u251c\u2500\u2500 package.json \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 README.md \u251c\u2500\u2500 test \u2502 \u2514\u2500\u2500 wordpress-cdk.test.ts \u2514\u2500\u2500 tsconfig.json 3 directories, 9 files CDK Bootstrap AWS\u30ea\u30fc\u30b8\u30e7\u30f3\u3054\u3068\u306bBootstrap\u30b9\u30bf\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 \uff081\u30a2\u30ab\u30a6\u30f3\u30c8\u30011\u30ea\u30fc\u30b8\u30e7\u30f3\u3042\u305f\u308a1\u56de\u5b9f\u884c\uff09 \u30bf\u30fc\u30df\u30ca\u30eb cdk bootstrap","title":"CDK\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210"},{"location":"create-project/#cdk","text":"","title":"CDK\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210"},{"location":"create-project/#_1","text":"\u30bf\u30fc\u30df\u30ca\u30eb mkdir wordpress-cdk cd wordpress-cdk","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210"},{"location":"create-project/#cdk-init","text":"Type Script\u3067\u9032\u3081\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk init app --language typescript # Welcome to your CDK TypeScript project This is a blank project for CDK development with TypeScript. The `cdk.json` file tells the CDK Toolkit how to execute your app. ## Useful commands * `npm run build` compile typescript to js * `npm run watch` watch for changes and compile * `npm run test` perform the jest unit tests * `cdk deploy` deploy this stack to your default AWS account/region * `cdk diff` compare deployed stack with current state * `cdk synth` emits the synthesized CloudFormation template Executing npm install... npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated npm WARN deprecated sane@4.1.0: some dependency vulnerabilities fixed, support for node < 10 dropped, and newer ECMAScript syntax/features added \u2705 All done! \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059 \u30bf\u30fc\u30df\u30ca\u30eb tree ./ -I node_modules ./ \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 wordpress-cdk.ts \u251c\u2500\u2500 cdk.json \u251c\u2500\u2500 jest.config.js \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 wordpress-cdk-stack.ts \u251c\u2500\u2500 package.json \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 README.md \u251c\u2500\u2500 test \u2502 \u2514\u2500\u2500 wordpress-cdk.test.ts \u2514\u2500\u2500 tsconfig.json 3 directories, 9 files","title":"CDK Init"},{"location":"create-project/#cdk-bootstrap","text":"AWS\u30ea\u30fc\u30b8\u30e7\u30f3\u3054\u3068\u306bBootstrap\u30b9\u30bf\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 \uff081\u30a2\u30ab\u30a6\u30f3\u30c8\u30011\u30ea\u30fc\u30b8\u30e7\u30f3\u3042\u305f\u308a1\u56de\u5b9f\u884c\uff09 \u30bf\u30fc\u30df\u30ca\u30eb cdk bootstrap","title":"CDK Bootstrap"},{"location":"create-rds/","text":"\u69cb\u6210\u56f3 RDS\u4f5c\u6210 \u7d9a\u3044\u3066RDS\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u30b3\u30fc\u30c9\u306f\u8a72\u5f53\u90e8\u5206\u306e\u307f\uff09 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : false , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) 94 95 96 97 98 99 new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) 70-86\u884c\u76ee VPC\u30b5\u30d6\u30cd\u30c3\u30c8\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30b5\u30d6\u30cd\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u304c\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u3092\u6d88\u3057\u305f\u90fd\u5408\u4e0a\u3001\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30b5\u30d6\u30cd\u30c3\u30c8\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u660e\u793a\u7684\u306b PRIVATE_ISOLATED \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 \u30a8\u30f3\u30b8\u30f3\u30bf\u30a4\u30d7\u3068\u3057\u3066MySQL(8.0.28)\u3092\u6307\u5b9a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u306ft4g.large\u3092\u6307\u5b9a \u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u309220GB\u306b\u6307\u5b9a 88\u884c\u76ee EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef 89\u884c\u76ee CloudFormation\u306e\u524a\u9664\u6642\u306bRDS\u3092\u7834\u68c4\u3059\u308b\u8a2d\u5b9a Danger RemovalPolicy \u304c DESTROY \u306e\u5834\u5408\u3001CloudFormation\u30b9\u30bf\u30c3\u30af\u306e\u5909\u66f4\u306a\u3069\u3067RDS\u3092\u524a\u9664\u3059\u308b\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\u672c\u756a\u904b\u7528\u306b\u3042\u305f\u3063\u3066\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 MySQL\u306e\u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u8a2d\u5b9a\u306e\u4e0a\u3001Secrets Manager\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \uff08\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306a\u3069\u3082\u3042\u308a\u307e\u3059\uff09 94-99\u884c\u76ee RDS\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3068Secrets Manager\u306e\u4fdd\u5b58\u5148\u3092\u51fa\u529b WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092User data\u3067\u884c\u3046\u3088\u3046\u5909\u66f4 \u624b\u52d5\u3067\u884c\u3063\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067\u3001User data\u3067\u884c\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9\u306f\u524d\u306e\u30da\u30fc\u30b8\u3067\u884c\u3063\u305f\u3082\u306e\u304b\u3089MariaDB\u306e\u8a2d\u5b9a\u3092\u9664\u3044\u305f\u3082\u306e\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk destroy cdk deploy Note \u4e00\u5ea6\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u9664\u3057\u305f\u306e\u3061\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002 \u4f55\u5ea6\u3067\u3082\u6c17\u8efd\u306b\u4f5c\u308a\u76f4\u305b\u308b\u306e\u304cCDK\uff01 \u30c7\u30d7\u30ed\u30a4\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001RDS\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u540d\u3001Secrets Manager\u306e\u30b7\u30fc\u30af\u30ec\u30c3\u30c8ID\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 RDS\u3078\u306e\u63a5\u7d9a\u60c5\u5831\u306e\u53d6\u5f97 Secrets Manager\u304b\u3089RDS\u3078\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 AWS SDK aws secretsmanager get-secret-value --secret-id [\u30b7\u30fc\u30af\u30ec\u30c3\u30c8ID] { \"ARN\": \".....\", \"Name\": \".....\", \"VersionId\": \".....\", \"SecretString\": \"{\\\"password\\\":\\\".....\\\",\\\"engine\\\":\\\"mysql\\\",\\\"port\\\":3306,\\\"dbInstanceIdentifier\\\":\\\".....\\\",\\\"host\\\":\\\".....\\\",\\\"username\\\":\\\".....\\\"}\", \"VersionStages\": [ \"AWSCURRENT\" ], \"CreatedDate\": \".....\" } WordPress\u306e\u8a2d\u5b9a EC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001RDS\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306a\u304f\u3001WordPress\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002 \u30de\u30eb\u30c1AZ\u69cb\u6210\u306b\u3059\u308b multiAz \u3092 true \u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u5b8c\u4e86\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u30de\u30eb\u30c1AZ\u5316\u304c\u5b8c\u4e86\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) } }","title":"RDS\u3092\u4f5c\u6210"},{"location":"create-rds/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-rds/#rds","text":"\u7d9a\u3044\u3066RDS\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u9577\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u30b3\u30fc\u30c9\u306f\u8a72\u5f53\u90e8\u5206\u306e\u307f\uff09 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_ec2 , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : false , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) 94 95 96 97 98 99 new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) 70-86\u884c\u76ee VPC\u30b5\u30d6\u30cd\u30c3\u30c8\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30b5\u30d6\u30cd\u30c3\u30c8\u306b\u306a\u308a\u307e\u3059\u304c\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u3092\u6d88\u3057\u305f\u90fd\u5408\u4e0a\u3001\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30b5\u30d6\u30cd\u30c3\u30c8\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u660e\u793a\u7684\u306b PRIVATE_ISOLATED \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 \u30a8\u30f3\u30b8\u30f3\u30bf\u30a4\u30d7\u3068\u3057\u3066MySQL(8.0.28)\u3092\u6307\u5b9a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u306ft4g.large\u3092\u6307\u5b9a \u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u309220GB\u306b\u6307\u5b9a 88\u884c\u76ee EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u306e\u63a5\u7d9a\u3092\u8a31\u53ef 89\u884c\u76ee CloudFormation\u306e\u524a\u9664\u6642\u306bRDS\u3092\u7834\u68c4\u3059\u308b\u8a2d\u5b9a Danger RemovalPolicy \u304c DESTROY \u306e\u5834\u5408\u3001CloudFormation\u30b9\u30bf\u30c3\u30af\u306e\u5909\u66f4\u306a\u3069\u3067RDS\u3092\u524a\u9664\u3059\u308b\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\u672c\u756a\u904b\u7528\u306b\u3042\u305f\u3063\u3066\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 MySQL\u306e\u30e6\u30fc\u30b6\u30fc\u540d\u3084\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u8a2d\u5b9a\u306e\u4e0a\u3001Secrets Manager\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \uff08\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306a\u3069\u3082\u3042\u308a\u307e\u3059\uff09 94-99\u884c\u76ee RDS\u306e\u30c9\u30e1\u30a4\u30f3\u540d\u3068Secrets Manager\u306e\u4fdd\u5b58\u5148\u3092\u51fa\u529b","title":"RDS\u4f5c\u6210"},{"location":"create-rds/#wordpressuser-data","text":"\u624b\u52d5\u3067\u884c\u3063\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067\u3001User data\u3067\u884c\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9\u306f\u524d\u306e\u30da\u30fc\u30b8\u3067\u884c\u3063\u305f\u3082\u306e\u304b\u3089MariaDB\u306e\u8a2d\u5b9a\u3092\u9664\u3044\u305f\u3082\u306e\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data })","title":"WordPress\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092User data\u3067\u884c\u3046\u3088\u3046\u5909\u66f4"},{"location":"create-rds/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk destroy cdk deploy Note \u4e00\u5ea6\u30ea\u30bd\u30fc\u30b9\u3092\u524a\u9664\u3057\u305f\u306e\u3061\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3059\u3002 \u4f55\u5ea6\u3067\u3082\u6c17\u8efd\u306b\u4f5c\u308a\u76f4\u305b\u308b\u306e\u304cCDK\uff01 \u30c7\u30d7\u30ed\u30a4\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001RDS\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u540d\u3001Secrets Manager\u306e\u30b7\u30fc\u30af\u30ec\u30c3\u30c8ID\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002","title":"CDK Deploy"},{"location":"create-rds/#rds_1","text":"Secrets Manager\u304b\u3089RDS\u3078\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 AWS SDK aws secretsmanager get-secret-value --secret-id [\u30b7\u30fc\u30af\u30ec\u30c3\u30c8ID] { \"ARN\": \".....\", \"Name\": \".....\", \"VersionId\": \".....\", \"SecretString\": \"{\\\"password\\\":\\\".....\\\",\\\"engine\\\":\\\"mysql\\\",\\\"port\\\":3306,\\\"dbInstanceIdentifier\\\":\\\".....\\\",\\\"host\\\":\\\".....\\\",\\\"username\\\":\\\".....\\\"}\", \"VersionStages\": [ \"AWSCURRENT\" ], \"CreatedDate\": \".....\" }","title":"RDS\u3078\u306e\u63a5\u7d9a\u60c5\u5831\u306e\u53d6\u5f97"},{"location":"create-rds/#wordpress","text":"EC2\u306e\u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001RDS\u306e\u63a5\u7d9a\u60c5\u5831\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306a\u304f\u3001WordPress\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002","title":"WordPress\u306e\u8a2d\u5b9a"},{"location":"create-rds/#az","text":"multiAz \u3092 true \u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u5b8c\u4e86\u3067\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 })","title":"\u30de\u30eb\u30c1AZ\u69cb\u6210\u306b\u3059\u308b"},{"location":"create-rds/#cdk-deploy_1","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u30de\u30eb\u30c1AZ\u5316\u304c\u5b8c\u4e86\u3067\u3059\u3002","title":"CDK Deploy"},{"location":"create-rds/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , aws_iam , aws_rds , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) ec2_sg . addIngressRule ( aws_ec2 . Peer . anyIpv4 (), aws_ec2 . Port . tcp ( 80 )) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-route53/","text":"\u69cb\u6210\u56f3 \u30c9\u30e1\u30a4\u30f3\u4f5c\u6210 \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u79c1\u306f Freenom \u3067 wordpress-cdk.tk \u3068\u3044\u3046\u30c9\u30e1\u30a4\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002 \uff08\u30c9\u30e1\u30a4\u30f3\u306e\u53d6\u5f97\u306f\u6e08\u3093\u3067\u3044\u308b\u3082\u306e\u3068\u3057\u3066\u9032\u3081\u307e\u3059\u3002\uff09 \u30c9\u30e1\u30a4\u30f3\u306eRoute 53\u3078\u306e\u767b\u9332 \u30c9\u30e1\u30a4\u30f3\u306e\u767b\u9332\u306fCDK\u3067\u306f\u306a\u304fAWS CLI\u3067\u884c\u3044\u307e\u3059\u3002 Note --caller-reference \u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb aws route53 create-hosted-zone \\ --name wordpress-cdk.tk \\ --caller-reference `date +%s` { \"Location\": \".....\", \"HostedZone\": { \"Id\": \".....\", \"Name\": \"wordpress-cdk.tk.\", \"CallerReference\": \"1651588600\", \"Config\": { \"PrivateZone\": false }, \"ResourceRecordSetCount\": 2 }, \"ChangeInfo\": { \"Id\": \".....\", \"Status\": \".....\", \"SubmittedAt\": \".....\" }, \"DelegationSet\": { \"NameServers\": [ \"ns-1111.awsdns-66.net\", \"ns-2222.awsdns-77.org\", \"ns-3333.awsdns-88.com\", \"ns-4444.awsdns-99.co.uk\" ] } } NameServers\u306e\u5024\u3092Freenom\u306b\u767b\u9332\u3057\u3001\u30c9\u30e1\u30a4\u30f3\u306e\u7ba1\u7406\u3092Route 53\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002 ELB\u7528\u306e\u30b5\u30d6\u30c9\u30e1\u30a4\u30f3\u306e\u4f5c\u6210 CDK\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 165 166 167 168 169 170 171 172 // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) 205 206 207 208 209 210 211 212 213 // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); 169-172\u884c\u76ee Route 53\u30db\u30b9\u30c8\u30be\u30fc\u30f3\u306e\u53d6\u5f97 \u30ea\u30bd\u30fc\u30b9\u306e\u65b0\u898f\u4f5c\u6210\u3067\u306f\u306a\u304f\u65e2\u5b58\u306e\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08new\u304c\u4e0d\u8981\u3067\u3059\uff09 209-213\u884c\u76ee ELB\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306eA\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9632\u3050 \u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u3067\u3001\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3067\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001AWS\u304c\u751f\u6210\u3059\u308bELB\u306e\u30c9\u30e1\u30a4\u30f3\u3067\u3082\u5f15\u304d\u7d9a\u304d\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u72b6\u614b\u3068\u306a\u308a\u307e\u3059\u3002 ELB\u306e\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u306b\u3001 elb.wordpress-cdk.tk \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 205 206 207 208 209 210 211 212 213 214 215 new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) HTTP\u30d8\u30c3\u30c0\u30fc\u306e host \u304cELB\u767a\u884c\u306e\u30c9\u30e1\u30a4\u30f3\u306e\u5834\u5408\u306b elb.wordpress-cdk.tk \u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u8a2d\u5b9a\u3067\u3059\u3002 Note permanent \u304c true \u306e\u5834\u5408\u306f\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c 301 \u306b\u3001false\u306e\u5834\u5408\u306f 302 \u306b\u306a\u308a\u307e\u3059\u3002 CDK Deploy \u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306e\u8ffd\u52a0"},{"location":"create-route53/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-route53/#_2","text":"\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u79c1\u306f Freenom \u3067 wordpress-cdk.tk \u3068\u3044\u3046\u30c9\u30e1\u30a4\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002 \uff08\u30c9\u30e1\u30a4\u30f3\u306e\u53d6\u5f97\u306f\u6e08\u3093\u3067\u3044\u308b\u3082\u306e\u3068\u3057\u3066\u9032\u3081\u307e\u3059\u3002\uff09","title":"\u30c9\u30e1\u30a4\u30f3\u4f5c\u6210"},{"location":"create-route53/#route-53","text":"\u30c9\u30e1\u30a4\u30f3\u306e\u767b\u9332\u306fCDK\u3067\u306f\u306a\u304fAWS CLI\u3067\u884c\u3044\u307e\u3059\u3002 Note --caller-reference \u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30fc\u30df\u30ca\u30eb aws route53 create-hosted-zone \\ --name wordpress-cdk.tk \\ --caller-reference `date +%s` { \"Location\": \".....\", \"HostedZone\": { \"Id\": \".....\", \"Name\": \"wordpress-cdk.tk.\", \"CallerReference\": \"1651588600\", \"Config\": { \"PrivateZone\": false }, \"ResourceRecordSetCount\": 2 }, \"ChangeInfo\": { \"Id\": \".....\", \"Status\": \".....\", \"SubmittedAt\": \".....\" }, \"DelegationSet\": { \"NameServers\": [ \"ns-1111.awsdns-66.net\", \"ns-2222.awsdns-77.org\", \"ns-3333.awsdns-88.com\", \"ns-4444.awsdns-99.co.uk\" ] } } NameServers\u306e\u5024\u3092Freenom\u306b\u767b\u9332\u3057\u3001\u30c9\u30e1\u30a4\u30f3\u306e\u7ba1\u7406\u3092Route 53\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"\u30c9\u30e1\u30a4\u30f3\u306eRoute 53\u3078\u306e\u767b\u9332"},{"location":"create-route53/#elb","text":"CDK\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; 165 166 167 168 169 170 171 172 // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) 205 206 207 208 209 210 211 212 213 // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); 169-172\u884c\u76ee Route 53\u30db\u30b9\u30c8\u30be\u30fc\u30f3\u306e\u53d6\u5f97 \u30ea\u30bd\u30fc\u30b9\u306e\u65b0\u898f\u4f5c\u6210\u3067\u306f\u306a\u304f\u65e2\u5b58\u306e\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08new\u304c\u4e0d\u8981\u3067\u3059\uff09 209-213\u884c\u76ee ELB\u3078\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306eA\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210","title":"ELB\u7528\u306e\u30b5\u30d6\u30c9\u30e1\u30a4\u30f3\u306e\u4f5c\u6210"},{"location":"create-route53/#cdk-deploy","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy","title":"CDK Deploy"},{"location":"create-route53/#aws","text":"\u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u3067\u3001\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3067\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001AWS\u304c\u751f\u6210\u3059\u308bELB\u306e\u30c9\u30e1\u30a4\u30f3\u3067\u3082\u5f15\u304d\u7d9a\u304d\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u72b6\u614b\u3068\u306a\u308a\u307e\u3059\u3002 ELB\u306e\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u306b\u3001 elb.wordpress-cdk.tk \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 205 206 207 208 209 210 211 212 213 214 215 new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) HTTP\u30d8\u30c3\u30c0\u30fc\u306e host \u304cELB\u767a\u884c\u306e\u30c9\u30e1\u30a4\u30f3\u306e\u5834\u5408\u306b elb.wordpress-cdk.tk \u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u8a2d\u5b9a\u3067\u3059\u3002 Note permanent \u304c true \u306e\u5834\u5408\u306f\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c 301 \u306b\u3001false\u306e\u5834\u5408\u306f 302 \u306b\u306a\u308a\u307e\u3059\u3002","title":"AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u9632\u3050"},{"location":"create-route53/#cdk-deploy_1","text":"\u30c7\u30d7\u30ed\u30a4\u3057\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy","title":"CDK Deploy"},{"location":"create-route53/#_3","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_autoscaling , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ([ elb . loadBalancerDnsName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'elb.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"create-vpc/","text":"\u69cb\u6210\u56f3 VPC\u4f5c\u6210 VPC\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { aws_ec2 , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , {}) } } CDK Diff \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u5f8c\u3001\u4f5c\u6210\u3055\u308c\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046 \u30bf\u30fc\u30df\u30ca\u30eb cdk diff Stack WordpressCdkStack Parameters [+] Parameter BootstrapVersion BootstrapVersion: {\"Type\":\"AWS::SSM::Parameter::Value<String>\",\"Default\":\"/cdk-bootstrap/hnb659fds/version\",\"Description\":\"Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]\"} Conditions [+] Condition CDKMetadata/Condition CDKMetadataAvailable: {\"Fn::Or\":[{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"af-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-northeast-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-northeast-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-southeast-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-southeast-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ca-central-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"cn-north-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"cn-northwest-1\"]}]},{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-central-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-north-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-3\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"me-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"sa-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-east-2\"]}]},{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-west-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-west-2\"]}]}]} Resources [+] AWS::EC2::VPC VPC VPCB9E5F0B4 [+] AWS::EC2::Subnet VPC/PublicSubnet1/Subnet VPCPublicSubnet1SubnetB4246D30 [+] AWS::EC2::RouteTable VPC/PublicSubnet1/RouteTable VPCPublicSubnet1RouteTableFEE4B781 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PublicSubnet1/RouteTableAssociation VPCPublicSubnet1RouteTableAssociation0B0896DC [+] AWS::EC2::Route VPC/PublicSubnet1/DefaultRoute VPCPublicSubnet1DefaultRoute91CEF279 [+] AWS::EC2::EIP VPC/PublicSubnet1/EIP VPCPublicSubnet1EIP6AD938E8 [+] AWS::EC2::NatGateway VPC/PublicSubnet1/NATGateway VPCPublicSubnet1NATGatewayE0556630 [+] AWS::EC2::Subnet VPC/PublicSubnet2/Subnet VPCPublicSubnet2Subnet74179F39 [+] AWS::EC2::RouteTable VPC/PublicSubnet2/RouteTable VPCPublicSubnet2RouteTable6F1A15F1 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PublicSubnet2/RouteTableAssociation VPCPublicSubnet2RouteTableAssociation5A808732 [+] AWS::EC2::Route VPC/PublicSubnet2/DefaultRoute VPCPublicSubnet2DefaultRouteB7481BBA [+] AWS::EC2::EIP VPC/PublicSubnet2/EIP VPCPublicSubnet2EIP4947BC00 [+] AWS::EC2::NatGateway VPC/PublicSubnet2/NATGateway VPCPublicSubnet2NATGateway3C070193 [+] AWS::EC2::Subnet VPC/PrivateSubnet1/Subnet VPCPrivateSubnet1Subnet8BCA10E0 [+] AWS::EC2::RouteTable VPC/PrivateSubnet1/RouteTable VPCPrivateSubnet1RouteTableBE8A6027 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PrivateSubnet1/RouteTableAssociation VPCPrivateSubnet1RouteTableAssociation347902D1 [+] AWS::EC2::Route VPC/PrivateSubnet1/DefaultRoute VPCPrivateSubnet1DefaultRouteAE1D6490 [+] AWS::EC2::Subnet VPC/PrivateSubnet2/Subnet VPCPrivateSubnet2SubnetCFCDAA7A [+] AWS::EC2::RouteTable VPC/PrivateSubnet2/RouteTable VPCPrivateSubnet2RouteTable0A19E10E [+] AWS::EC2::SubnetRouteTableAssociation VPC/PrivateSubnet2/RouteTableAssociation VPCPrivateSubnet2RouteTableAssociation0C73D413 [+] AWS::EC2::Route VPC/PrivateSubnet2/DefaultRoute VPCPrivateSubnet2DefaultRouteF4F5CFD2 [+] AWS::EC2::InternetGateway VPC/IGW VPCIGWB7E252D3 [+] AWS::EC2::VPCGatewayAttachment VPC/VPCGW VPCVPCGW99B986DC Other Changes [+] Unknown Rules: {\"CheckBootstrapVersion\":{\"Assertions\":[{\"Assert\":{\"Fn::Not\":[{\"Fn::Contains\":[[\"1\",\"2\",\"3\",\"4\",\"5\"],{\"Ref\":\"BootstrapVersion\"}]}]},\"AssertDescription\":\"CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.\"}]}} \u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 VPC PublicSubnet1 Subnet RouteTable RouteTableAssociation DefaultRoute EIP NATGateway PublicSubnet2 Subnet RouteTable RouteTableAssociation DefaultRoute EIP NATGateway PrivateSubnet1 Subnet RouteTable RouteTableAssociation DefaultRoute PrivateSubnet2 Subnet RouteTable RouteTableAssociation DefaultRoute IGW VPCGatewayAttachment \u5c11\u3057\u30ab\u30b9\u30bf\u30de\u30a4\u30ba \u4e0a\u8a18\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3067\u3057\u305f\u304c\u3001\u7d30\u304b\u306a\u8a2d\u5b9a\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 12 13 14 const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) \u3053\u3046\u3059\u308b\u3068\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u304c\u4f5c\u6210\u3055\u308c\u305a\u3001Private\u30b5\u30d6\u30cd\u30c3\u30c8\u304c\u72ec\u7acb\u3057\u307e\u3059\u3002 \u540d\u79f0\u3082IsolatedSubnet1/IsolatedSubnet2\u306b\u5909\u66f4\u306b\u306a\u308a\u307e\u3059\u3002 CDK Deploy CDK\u3067\u5b9a\u7fa9\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092AWS\u74b0\u5883\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy Warning NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u3042\u308a\u72b6\u614b\u3067deploy\u3057\u305f\u306e\u3061\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u306a\u3057\u306b\u5909\u66f4\u3059\u308b\u3068\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u91cd\u8907\u304c\u767a\u751f\u3057\u3001\u30c7\u30d7\u30ed\u30a4\u306b\u5931\u6557\u3057\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u5834\u5408\u306f\u4e00\u5ea6 cdk destroy \u3067\u30ea\u30bd\u30fc\u30b9\u3092\u3059\u3079\u3066\u524a\u9664\u3057\u305f\u5f8c\u3001\u518d\u5ea6 cdk deploy \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) } }","title":"VPC\u3092\u4f5c\u6210"},{"location":"create-vpc/#_1","text":"","title":"\u69cb\u6210\u56f3"},{"location":"create-vpc/#vpc","text":"VPC\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { aws_ec2 , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , {}) } }","title":"VPC\u4f5c\u6210"},{"location":"create-vpc/#cdk-diff","text":"\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u5f8c\u3001\u4f5c\u6210\u3055\u308c\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046 \u30bf\u30fc\u30df\u30ca\u30eb cdk diff Stack WordpressCdkStack Parameters [+] Parameter BootstrapVersion BootstrapVersion: {\"Type\":\"AWS::SSM::Parameter::Value<String>\",\"Default\":\"/cdk-bootstrap/hnb659fds/version\",\"Description\":\"Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]\"} Conditions [+] Condition CDKMetadata/Condition CDKMetadataAvailable: {\"Fn::Or\":[{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"af-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-northeast-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-northeast-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-southeast-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ap-southeast-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"ca-central-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"cn-north-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"cn-northwest-1\"]}]},{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-central-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-north-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-2\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"eu-west-3\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"me-south-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"sa-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-east-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-east-2\"]}]},{\"Fn::Or\":[{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-west-1\"]},{\"Fn::Equals\":[{\"Ref\":\"AWS::Region\"},\"us-west-2\"]}]}]} Resources [+] AWS::EC2::VPC VPC VPCB9E5F0B4 [+] AWS::EC2::Subnet VPC/PublicSubnet1/Subnet VPCPublicSubnet1SubnetB4246D30 [+] AWS::EC2::RouteTable VPC/PublicSubnet1/RouteTable VPCPublicSubnet1RouteTableFEE4B781 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PublicSubnet1/RouteTableAssociation VPCPublicSubnet1RouteTableAssociation0B0896DC [+] AWS::EC2::Route VPC/PublicSubnet1/DefaultRoute VPCPublicSubnet1DefaultRoute91CEF279 [+] AWS::EC2::EIP VPC/PublicSubnet1/EIP VPCPublicSubnet1EIP6AD938E8 [+] AWS::EC2::NatGateway VPC/PublicSubnet1/NATGateway VPCPublicSubnet1NATGatewayE0556630 [+] AWS::EC2::Subnet VPC/PublicSubnet2/Subnet VPCPublicSubnet2Subnet74179F39 [+] AWS::EC2::RouteTable VPC/PublicSubnet2/RouteTable VPCPublicSubnet2RouteTable6F1A15F1 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PublicSubnet2/RouteTableAssociation VPCPublicSubnet2RouteTableAssociation5A808732 [+] AWS::EC2::Route VPC/PublicSubnet2/DefaultRoute VPCPublicSubnet2DefaultRouteB7481BBA [+] AWS::EC2::EIP VPC/PublicSubnet2/EIP VPCPublicSubnet2EIP4947BC00 [+] AWS::EC2::NatGateway VPC/PublicSubnet2/NATGateway VPCPublicSubnet2NATGateway3C070193 [+] AWS::EC2::Subnet VPC/PrivateSubnet1/Subnet VPCPrivateSubnet1Subnet8BCA10E0 [+] AWS::EC2::RouteTable VPC/PrivateSubnet1/RouteTable VPCPrivateSubnet1RouteTableBE8A6027 [+] AWS::EC2::SubnetRouteTableAssociation VPC/PrivateSubnet1/RouteTableAssociation VPCPrivateSubnet1RouteTableAssociation347902D1 [+] AWS::EC2::Route VPC/PrivateSubnet1/DefaultRoute VPCPrivateSubnet1DefaultRouteAE1D6490 [+] AWS::EC2::Subnet VPC/PrivateSubnet2/Subnet VPCPrivateSubnet2SubnetCFCDAA7A [+] AWS::EC2::RouteTable VPC/PrivateSubnet2/RouteTable VPCPrivateSubnet2RouteTable0A19E10E [+] AWS::EC2::SubnetRouteTableAssociation VPC/PrivateSubnet2/RouteTableAssociation VPCPrivateSubnet2RouteTableAssociation0C73D413 [+] AWS::EC2::Route VPC/PrivateSubnet2/DefaultRoute VPCPrivateSubnet2DefaultRouteF4F5CFD2 [+] AWS::EC2::InternetGateway VPC/IGW VPCIGWB7E252D3 [+] AWS::EC2::VPCGatewayAttachment VPC/VPCGW VPCVPCGW99B986DC Other Changes [+] Unknown Rules: {\"CheckBootstrapVersion\":{\"Assertions\":[{\"Assert\":{\"Fn::Not\":[{\"Fn::Contains\":[[\"1\",\"2\",\"3\",\"4\",\"5\"],{\"Ref\":\"BootstrapVersion\"}]}]},\"AssertDescription\":\"CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.\"}]}} \u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 VPC PublicSubnet1 Subnet RouteTable RouteTableAssociation DefaultRoute EIP NATGateway PublicSubnet2 Subnet RouteTable RouteTableAssociation DefaultRoute EIP NATGateway PrivateSubnet1 Subnet RouteTable RouteTableAssociation DefaultRoute PrivateSubnet2 Subnet RouteTable RouteTableAssociation DefaultRoute IGW VPCGatewayAttachment","title":"CDK Diff"},{"location":"create-vpc/#_2","text":"\u4e0a\u8a18\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3067\u3057\u305f\u304c\u3001\u7d30\u304b\u306a\u8a2d\u5b9a\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 12 13 14 const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) \u3053\u3046\u3059\u308b\u3068\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u304c\u4f5c\u6210\u3055\u308c\u305a\u3001Private\u30b5\u30d6\u30cd\u30c3\u30c8\u304c\u72ec\u7acb\u3057\u307e\u3059\u3002 \u540d\u79f0\u3082IsolatedSubnet1/IsolatedSubnet2\u306b\u5909\u66f4\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u5c11\u3057\u30ab\u30b9\u30bf\u30de\u30a4\u30ba"},{"location":"create-vpc/#cdk-deploy","text":"CDK\u3067\u5b9a\u7fa9\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092AWS\u74b0\u5883\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30bf\u30fc\u30df\u30ca\u30eb cdk deploy Warning NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u3042\u308a\u72b6\u614b\u3067deploy\u3057\u305f\u306e\u3061\u3001NAT\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u306a\u3057\u306b\u5909\u66f4\u3059\u308b\u3068\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u91cd\u8907\u304c\u767a\u751f\u3057\u3001\u30c7\u30d7\u30ed\u30a4\u306b\u5931\u6557\u3057\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u5834\u5408\u306f\u4e00\u5ea6 cdk destroy \u3067\u30ea\u30bd\u30fc\u30b9\u3092\u3059\u3079\u3066\u524a\u9664\u3057\u305f\u5f8c\u3001\u518d\u5ea6 cdk deploy \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"CDK Deploy"},{"location":"create-vpc/#_3","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 wordpress-cdk/lib/wordpress-cdk-stack.ts import { aws_ec2 , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"finishing/","text":"\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u306e\u307f\u306b\u9650\u5b9a\u3059\u308b \u3053\u308c\u307e\u3067\u306e\u8a2d\u5b9a\u3067\u3001WordPress\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5b9b\u5148\u304c\u8907\u6570\u51fa\u3066\u304d\u307e\u3057\u305f\u3002 \u6700\u7d42\u7684\u306b\u306fCloudFront\u306b\u8a2d\u5b9a\u3057\u305f\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u4ee5\u5916\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u9632\u304e\u307e\u3059\u3002 No. AWS\u30b5\u30fc\u30d3\u30b9 \u5b9b\u5148 \u30a2\u30af\u30bb\u30b9\u53ef\u5426\u30eb\u30fc\u30eb 1 EC2 \u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9 \u30d6\u30ed\u30c3\u30af 2 EC2 AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 \u30d6\u30ed\u30c3\u30af 3 ELB AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 4 ELB \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 5 CloudFront AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 6 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 \u30a2\u30af\u30bb\u30b9\u8a31\u53ef EC2\u3078\u306e\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3092\u30d6\u30ed\u30c3\u30af\uff08No.1,2\uff09 EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3067\u8a31\u53ef\u3057\u306a\u3044\uff08\uff1d\u7981\u6b62\u3059\u308b\uff09 wordpress-cdk/lib/wordpress-cdk-stack.ts 32 // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) CloudFront\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\uff08No.3,4,5\uff09 ELB\u306e\u30ea\u30b9\u30ca\u30fc\u30eb\u30fc\u30eb\u3092\u8a2d\u5b9a HOST\u30d8\u30c3\u30c0\u30fc\u304c\u4e00\u81f4\u3057\u305f\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 wordpress-cdk/lib/wordpress-cdk-stack.ts 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) \u78ba\u8a8d ELB AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 ELB \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 CloudFront AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 curl -v http://Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com * Trying 35.75.128.36:80... * TCP_NODELAY set * Connected to Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com (35.75.128.36) port 80 (#0) > GET / HTTP/1.1 > Host: Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:21:44 GMT < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Location: http://www.wordpress-cdk.tk:80/ < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com left intact curl -v http://elb.wordpress-cdk.tk * Trying 54.250.174.110:80... * TCP_NODELAY set * Connected to elb.wordpress-cdk.tk (54.250.174.110) port 80 (#0) > GET / HTTP/1.1 > Host: elb.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:22:32 GMT < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Location: http://www.wordpress-cdk.tk:80/ < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host elb.wordpress-cdk.tk left intact curl -v http://d2rgr0fwcf5dr7.cloudfront.net * Trying 18.65.123.50:80... * TCP_NODELAY set * Connected to d2rgr0fwcf5dr7.cloudfront.net (18.65.123.50) port 80 (#0) > GET / HTTP/1.1 > Host: d2rgr0fwcf5dr7.cloudfront.net > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:23:03 GMT < Location: https://www.wordpress-cdk.tk:443/ < X-Cache: Miss from cloudfront < Via: 1.1 a9715fbde86b226b6436617aa33710cc.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: KIX50-P3 < X-Amz-Cf-Id: -H8dpDTFP4ZjsNbpsrtW7UkRKwjolKLPKpzmVm0qTTYfimI5ujZSXA== < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host d2rgr0fwcf5dr7.cloudfront.net left intact curl -v http://www.wordpress-cdk.tk * Trying 13.32.50.103:80... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.32.50.103) port 80 (#0) > GET / HTTP/1.1 > Host: www.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 302 Found < Content-Type: text/html; charset=UTF-8 < Content-Length: 0 < Connection: keep-alive < Date: Wed, 04 May 2022 05:25:39 GMT < Server: Apache/2.4.53 () < X-Powered-By: PHP/7.2.34 < Location: http://www.wordpress-cdk.tk/wp-admin/setup-config.php < X-Cache: Miss from cloudfront < Via: 1.1 a2447ed6669558ff303af177568ddb72.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: NRT57-C1 < X-Amz-Cf-Id: sPrq1LoZtFYma4tCKAdSa_ci7Od9hudO7PTtW0kh0T12axvUllaeGA== < * Connection #0 to host www.wordpress-cdk.tk left intact Info \u3053\u306e\u5834\u5408\u3082302\u3067\u8ee2\u9001\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u521d\u671f\u8a2d\u5b9a\u524d\u306a\u306e\u3067WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u753b\u9762\u306b\u8ee2\u9001\u3055\u308c\u3066\u3044\u307e\u3059\u3002 HTTPS\u63a5\u7d9a\u306e\u307f\u306b\u9650\u5b9a\u3059\u308b \u305b\u3063\u304b\u304fSSL\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u3001HTTP\u3067\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u5834\u5408\u306bHTTPS\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046 Danger WordPress\u306eSSL\u5316\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3057\u3066\u304b\u3089HTTPS\u306e\u307f\u306b\u9650\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 193 194 195 196 197 198 199 200 201 202 203 204 const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) ViewerProtocolPolicy\u3092 ALLOW_ALL \u304b\u3089 REDIRECT_TO_HTTPS \u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3078HTTP\u63a5\u7d9a CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3078HTTPS\u63a5\u7d9a curl -v http://www.wordpress-cdk.tk * Trying 13.35.49.75:80... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.35.49.75) port 80 (#0) > GET / HTTP/1.1 > Host: www.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: CloudFront < Date: Wed, 04 May 2022 05:35:34 GMT < Content-Type: text/html < Content-Length: 183 < Connection: keep-alive < Location: https://www.wordpress-cdk.tk/ < X-Cache: Redirect from cloudfront < Via: 1.1 4da2bc835e000996f0b384c9db0412cc.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: NRT20-C1 < X-Amz-Cf-Id: fYs-ClGPQl6YUaZrkAe8h30z83xkw7yf1skElwdShSSqcb6hb14luA== < <html> <head><title>301 Moved Permanently</title></head> <body bgcolor=\"white\"> <center><h1>301 Moved Permanently</h1></center> <hr><center>CloudFront</center> </body> </html> * Connection #0 to host www.wordpress-cdk.tk left intact curl -v https://www.wordpress-cdk.tk * Trying 13.35.49.75:443... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.35.49.75) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8): * TLSv1.3 (IN), TLS handshake, Certificate (11): * TLSv1.3 (IN), TLS handshake, CERT verify (15): * TLSv1.3 (IN), TLS handshake, Finished (20): * TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.3 (OUT), TLS handshake, Finished (20): * SSL connection using TLSv1.3 / TLS_AES_128_GCM_SHA256 * ALPN, server accepted to use h2 * Server certificate: * subject: CN=www.wordpress-cdk.tk * start date: May 4 00:00:00 2022 GMT * expire date: Jun 3 23:59:59 2023 GMT * subjectAltName: host \"www.wordpress-cdk.tk\" matched cert's \"www.wordpress-cdk.tk\" * issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon * SSL certificate verify ok. * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0 * Using Stream ID: 1 (easy handle 0x5556c248fe10) > GET / HTTP/2 > Host: www.wordpress-cdk.tk > user-agent: curl/7.68.0 > accept: */* > * Connection state changed (MAX_CONCURRENT_STREAMS == 128)! < HTTP/2 302 < content-type: text/html; charset=UTF-8 < content-length: 0 < location: http://www.wordpress-cdk.tk/wp-admin/setup-config.php < date: Wed, 04 May 2022 05:36:05 GMT < server: Apache/2.4.53 () < x-powered-by: PHP/7.2.34 < x-cache: Miss from cloudfront < via: 1.1 d8d967e8190a369930c2613d498c9db8.cloudfront.net (CloudFront) < x-amz-cf-pop: NRT20-C1 < x-amz-cf-id: F4zOC-9FsS3sA7SDAMHHseItlrbShmyzUCgxCtbzYJgDGXlU1nAqqQ== < * Connection #0 to host www.wordpress-cdk.tk left intact \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 bin/wordpress-cdk.ts lib/wordpress-cdk-stack.ts lib/wordpress-cdk-stack-us-east-1.ts #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , // viewerProtocolPolicy: aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL, viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); // ***** // CloudFormation Output // ***** new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } } import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } }","title":"\u6700\u5f8c\u306e\u4ed5\u4e0a\u3052"},{"location":"finishing/#_1","text":"\u3053\u308c\u307e\u3067\u306e\u8a2d\u5b9a\u3067\u3001WordPress\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5b9b\u5148\u304c\u8907\u6570\u51fa\u3066\u304d\u307e\u3057\u305f\u3002 \u6700\u7d42\u7684\u306b\u306fCloudFront\u306b\u8a2d\u5b9a\u3057\u305f\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u4ee5\u5916\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u9632\u304e\u307e\u3059\u3002 No. AWS\u30b5\u30fc\u30d3\u30b9 \u5b9b\u5148 \u30a2\u30af\u30bb\u30b9\u53ef\u5426\u30eb\u30fc\u30eb 1 EC2 \u30d1\u30d6\u30ea\u30c3\u30afIP\u30a2\u30c9\u30ec\u30b9 \u30d6\u30ed\u30c3\u30af 2 EC2 AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 \u30d6\u30ed\u30c3\u30af 3 ELB AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 4 ELB \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 5 CloudFront AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront\u306e\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 6 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 \u30a2\u30af\u30bb\u30b9\u8a31\u53ef EC2\u3078\u306e\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3092\u30d6\u30ed\u30c3\u30af\uff08No.1,2\uff09 EC2\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3067\u8a31\u53ef\u3057\u306a\u3044\uff08\uff1d\u7981\u6b62\u3059\u308b\uff09 wordpress-cdk/lib/wordpress-cdk-stack.ts 32 // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) CloudFront\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\uff08No.3,4,5\uff09 ELB\u306e\u30ea\u30b9\u30ca\u30fc\u30eb\u30fc\u30eb\u3092\u8a2d\u5b9a HOST\u30d8\u30c3\u30c0\u30fc\u304c\u4e00\u81f4\u3057\u305f\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8 wordpress-cdk/lib/wordpress-cdk-stack.ts 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) \u78ba\u8a8d ELB AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 ELB \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 CloudFront AWS\u751f\u6210\u30c9\u30e1\u30a4\u30f3 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3 curl -v http://Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com * Trying 35.75.128.36:80... * TCP_NODELAY set * Connected to Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com (35.75.128.36) port 80 (#0) > GET / HTTP/1.1 > Host: Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:21:44 GMT < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Location: http://www.wordpress-cdk.tk:80/ < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host Wordp-elb83-1TT135MDVLZ3N-1130701054.ap-northeast-1.elb.amazonaws.com left intact curl -v http://elb.wordpress-cdk.tk * Trying 54.250.174.110:80... * TCP_NODELAY set * Connected to elb.wordpress-cdk.tk (54.250.174.110) port 80 (#0) > GET / HTTP/1.1 > Host: elb.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:22:32 GMT < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Location: http://www.wordpress-cdk.tk:80/ < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host elb.wordpress-cdk.tk left intact curl -v http://d2rgr0fwcf5dr7.cloudfront.net * Trying 18.65.123.50:80... * TCP_NODELAY set * Connected to d2rgr0fwcf5dr7.cloudfront.net (18.65.123.50) port 80 (#0) > GET / HTTP/1.1 > Host: d2rgr0fwcf5dr7.cloudfront.net > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Content-Type: text/html < Content-Length: 134 < Connection: keep-alive < Server: awselb/2.0 < Date: Wed, 04 May 2022 05:23:03 GMT < Location: https://www.wordpress-cdk.tk:443/ < X-Cache: Miss from cloudfront < Via: 1.1 a9715fbde86b226b6436617aa33710cc.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: KIX50-P3 < X-Amz-Cf-Id: -H8dpDTFP4ZjsNbpsrtW7UkRKwjolKLPKpzmVm0qTTYfimI5ujZSXA== < <html> <head><title>301 Moved Permanently</title></head> <body> <center><h1>301 Moved Permanently</h1></center> </body> </html> * Connection #0 to host d2rgr0fwcf5dr7.cloudfront.net left intact curl -v http://www.wordpress-cdk.tk * Trying 13.32.50.103:80... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.32.50.103) port 80 (#0) > GET / HTTP/1.1 > Host: www.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 302 Found < Content-Type: text/html; charset=UTF-8 < Content-Length: 0 < Connection: keep-alive < Date: Wed, 04 May 2022 05:25:39 GMT < Server: Apache/2.4.53 () < X-Powered-By: PHP/7.2.34 < Location: http://www.wordpress-cdk.tk/wp-admin/setup-config.php < X-Cache: Miss from cloudfront < Via: 1.1 a2447ed6669558ff303af177568ddb72.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: NRT57-C1 < X-Amz-Cf-Id: sPrq1LoZtFYma4tCKAdSa_ci7Od9hudO7PTtW0kh0T12axvUllaeGA== < * Connection #0 to host www.wordpress-cdk.tk left intact Info \u3053\u306e\u5834\u5408\u3082302\u3067\u8ee2\u9001\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u521d\u671f\u8a2d\u5b9a\u524d\u306a\u306e\u3067WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u753b\u9762\u306b\u8ee2\u9001\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u306e\u307f\u306b\u9650\u5b9a\u3059\u308b"},{"location":"finishing/#https","text":"\u305b\u3063\u304b\u304fSSL\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u3001HTTP\u3067\u30a2\u30af\u30bb\u30b9\u304c\u6765\u305f\u5834\u5408\u306bHTTPS\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046 Danger WordPress\u306eSSL\u5316\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3057\u3066\u304b\u3089HTTPS\u306e\u307f\u306b\u9650\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 wordpress-cdk/lib/wordpress-cdk-stack.ts 193 194 195 196 197 198 199 200 201 202 203 204 const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) ViewerProtocolPolicy\u3092 ALLOW_ALL \u304b\u3089 REDIRECT_TO_HTTPS \u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002 CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3078HTTP\u63a5\u7d9a CloudFront \u72ec\u81ea\u30c9\u30e1\u30a4\u30f3\u3078HTTPS\u63a5\u7d9a curl -v http://www.wordpress-cdk.tk * Trying 13.35.49.75:80... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.35.49.75) port 80 (#0) > GET / HTTP/1.1 > Host: www.wordpress-cdk.tk > User-Agent: curl/7.68.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 301 Moved Permanently < Server: CloudFront < Date: Wed, 04 May 2022 05:35:34 GMT < Content-Type: text/html < Content-Length: 183 < Connection: keep-alive < Location: https://www.wordpress-cdk.tk/ < X-Cache: Redirect from cloudfront < Via: 1.1 4da2bc835e000996f0b384c9db0412cc.cloudfront.net (CloudFront) < X-Amz-Cf-Pop: NRT20-C1 < X-Amz-Cf-Id: fYs-ClGPQl6YUaZrkAe8h30z83xkw7yf1skElwdShSSqcb6hb14luA== < <html> <head><title>301 Moved Permanently</title></head> <body bgcolor=\"white\"> <center><h1>301 Moved Permanently</h1></center> <hr><center>CloudFront</center> </body> </html> * Connection #0 to host www.wordpress-cdk.tk left intact curl -v https://www.wordpress-cdk.tk * Trying 13.35.49.75:443... * TCP_NODELAY set * Connected to www.wordpress-cdk.tk (13.35.49.75) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8): * TLSv1.3 (IN), TLS handshake, Certificate (11): * TLSv1.3 (IN), TLS handshake, CERT verify (15): * TLSv1.3 (IN), TLS handshake, Finished (20): * TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.3 (OUT), TLS handshake, Finished (20): * SSL connection using TLSv1.3 / TLS_AES_128_GCM_SHA256 * ALPN, server accepted to use h2 * Server certificate: * subject: CN=www.wordpress-cdk.tk * start date: May 4 00:00:00 2022 GMT * expire date: Jun 3 23:59:59 2023 GMT * subjectAltName: host \"www.wordpress-cdk.tk\" matched cert's \"www.wordpress-cdk.tk\" * issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon * SSL certificate verify ok. * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0 * Using Stream ID: 1 (easy handle 0x5556c248fe10) > GET / HTTP/2 > Host: www.wordpress-cdk.tk > user-agent: curl/7.68.0 > accept: */* > * Connection state changed (MAX_CONCURRENT_STREAMS == 128)! < HTTP/2 302 < content-type: text/html; charset=UTF-8 < content-length: 0 < location: http://www.wordpress-cdk.tk/wp-admin/setup-config.php < date: Wed, 04 May 2022 05:36:05 GMT < server: Apache/2.4.53 () < x-powered-by: PHP/7.2.34 < x-cache: Miss from cloudfront < via: 1.1 d8d967e8190a369930c2613d498c9db8.cloudfront.net (CloudFront) < x-amz-cf-pop: NRT20-C1 < x-amz-cf-id: F4zOC-9FsS3sA7SDAMHHseItlrbShmyzUCgxCtbzYJgDGXlU1nAqqQ== < * Connection #0 to host www.wordpress-cdk.tk left intact","title":"HTTPS\u63a5\u7d9a\u306e\u307f\u306b\u9650\u5b9a\u3059\u308b"},{"location":"finishing/#_2","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 bin/wordpress-cdk.ts lib/wordpress-cdk-stack.ts lib/wordpress-cdk-stack-us-east-1.ts #!/usr/bin/env node import 'source-map-support/register' ; import * as cdk from 'aws-cdk-lib' ; import { WordpressCdkStack } from '../lib/wordpress-cdk-stack' ; import { WordpressCdkUsEast1Stack } from '../lib/wordpress-cdk-stack-us-east-1' ; const app = new cdk . App (); new WordpressCdkUsEast1Stack ( app , 'WordpressCdkUsEast1Stack' , { env : { region : 'us-east-1' } }) new WordpressCdkStack ( app , 'WordpressCdkStack' , { /* If you don't specify 'env', this stack will be environment-agnostic. * Account/Region-dependent features and context lookups will not work, * but a single synthesized template can be deployed anywhere. */ /* Uncomment the next line to specialize this stack for the AWS Account * and Region that are implied by the current CLI configuration. */ // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION }, /* Uncomment the next line if you know exactly what Account and Region you * want to deploy the stack to. */ // env: { account: '123456789012', region: 'us-east-1' }, /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ }); import { aws_autoscaling , aws_certificatemanager , aws_cloudfront , aws_cloudfront_origins , aws_ec2 , aws_efs , aws_elasticloadbalancingv2 , aws_elasticloadbalancingv2_targets , aws_iam , aws_rds , aws_route53 , aws_route53_targets , CfnOutput , RemovalPolicy , Stack , StackProps } from 'aws-cdk-lib' ; import { Construct } from 'constructs' ; export class WordpressCdkStack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // VPC // ***** const vpc = new aws_ec2 . Vpc ( this , 'VPC' , { natGateways : 0 }) // ***** // EFS // ***** const efs = new aws_efs . FileSystem ( this , 'efs' , { vpc : vpc , removalPolicy : RemovalPolicy.DESTROY , }) // ***** // EC2 // ***** const ec2_sg = new aws_ec2 . SecurityGroup ( this , 'ec2-sg' , { vpc : vpc , }) // ec2_sg.addIngressRule(aws_ec2.Peer.anyIpv4(), aws_ec2.Port.tcp(80)) const ec2_role = new aws_iam . Role ( this , 'wordpress-role' , { assumedBy : new aws_iam . ServicePrincipal ( 'ec2.amazonaws.com' ), managedPolicies : [ aws_iam . ManagedPolicy . fromAwsManagedPolicyName ( 'AmazonSSMManagedInstanceCore' ), ], }) const ec2_user_data = new aws_ec2 . MultipartUserData () const ec2_command = aws_ec2 . UserData . forLinux () ec2_user_data . addUserDataPart ( ec2_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) ec2_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"wget https://wordpress.org/latest.tar.gz\" , \"tar -xzf latest.tar.gz\" , \"cp -r wordpress/* /var/www/html/\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const ec2 = new aws_ec2 . Instance ( this , 'wordpress' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : ec2_user_data }) efs . connections . allowDefaultPortFrom ( ec2 ) // ***** // RDS // ***** const rds = new aws_rds . DatabaseInstance ( this , 'Database' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PRIVATE_ISOLATED }, multiAz : true , engine : aws_rds.DatabaseInstanceEngine.mysql ({ version : aws_rds.MysqlEngineVersion.VER_8_0_28 }), instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . BURSTABLE4_GRAVITON , aws_ec2 . InstanceSize . LARGE ), databaseName : \"wordpress\" , allocatedStorage : 20 }) rds . connections . allowDefaultPortFrom ( ec2_sg ) rds . applyRemovalPolicy ( RemovalPolicy . DESTROY ) // ***** // EC2 Auto Scaling // ***** const asg_user_data = new aws_ec2 . MultipartUserData () const asg_command = aws_ec2 . UserData . forLinux () asg_user_data . addUserDataPart ( asg_command , aws_ec2 . MultipartBody . SHELL_SCRIPT , true ) asg_command . addCommands ( \"#!/bin/bash\" , \"\" , \"yum update -y\" , \"amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\" , \"yum install -y httpd\" , // efs \"yum install -y amazon-efs-utils\" , \"yum install -y nfs-utils\" , \"file_system_id_1=\" + efs . fileSystemId , \"efs_mount_point_1=/var/www/html\" , \"mkdir -p \\\"${efs_mount_point_1}\\\"\" , \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack . of ( this ). region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\" , \"mount -a -t efs,nfs4 defaults\" , // efs \"systemctl enable httpd\" , \"systemctl start httpd\" , \"chown -R apache /var/www\" , \"chgrp -R apache /var/www\" , \"chmod 2775 /var/www\" , \"find /var/www -type d -exec sudo chmod 2775 {} \\;\" , \"find /var/www -type f -exec sudo chmod 0644 {} \\;\" , ) const asg = new aws_autoscaling . AutoScalingGroup ( this , 'asg' , { vpc : vpc , vpcSubnets : { subnetType : aws_ec2.SubnetType.PUBLIC }, securityGroup : ec2_sg , instanceType : aws_ec2.InstanceType.of ( aws_ec2 . InstanceClass . T3 , aws_ec2 . InstanceSize . SMALL ), machineImage : new aws_ec2 . AmazonLinuxImage ({ generation : aws_ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }), role : ec2_role , userData : asg_user_data , minCapacity : 1 , maxCapacity : 2 , desiredCapacity : 2 , spotPrice : \"0.01\" }) efs . connections . allowDefaultPortFrom ( asg ) // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . DnsValidatedCertificate ( this , 'cloudfront_cert' , { hostedZone : hostedzone , domainName : 'www.wordpress-cdk.tk' , region : 'us-east-1' }) const elb_cert = new aws_certificatemanager . Certificate ( this , 'elb_cert' , { domainName : 'elb.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ) }) // ***** // CloudFront // ***** const cloudfront = new aws_cloudfront . Distribution ( this , 'cloudfront' , { defaultBehavior : { origin : new aws_cloudfront_origins . HttpOrigin ( \"elb.wordpress-cdk.tk\" ), allowedMethods : aws_cloudfront.AllowedMethods.ALLOW_ALL , cachedMethods : aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS , // viewerProtocolPolicy: aws_cloudfront.ViewerProtocolPolicy.ALLOW_ALL, viewerProtocolPolicy : aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS , cachePolicy : aws_cloudfront.CachePolicy.CACHING_OPTIMIZED , originRequestPolicy : aws_cloudfront.OriginRequestPolicy.ALL_VIEWER , }, domainNames : [ 'www.wordpress-cdk.tk' ], certificate : cloudfront_cert }) // ***** // Elastic Load Balancing // ***** const elb_sg = new aws_ec2 . SecurityGroup ( this , 'elb-sg' , { vpc : vpc , }) const elb = new aws_elasticloadbalancingv2 . ApplicationLoadBalancer ( this , 'elb' , { vpc : vpc , securityGroup : elb_sg , internetFacing : true , }) const elb_targetgroup = new aws_elasticloadbalancingv2 . ApplicationTargetGroup ( this , 'targetgroup' , { vpc : vpc , targets : [ new aws_elasticloadbalancingv2_targets . InstanceTarget ( ec2 )], port : 80 , healthCheck : { enabled : true , healthyHttpCodes : \"200-399\" }, }) asg . attachToApplicationTargetGroup ( elb_targetgroup ) ec2_sg . addIngressRule ( aws_ec2 . Peer . securityGroupId ( elb_sg . securityGroupId ), aws_ec2 . Port . tcp ( 80 )) const listener_http = elb . addListener ( 'Listener_http' , { port : 80 , open : true , defaultTargetGroups : [ elb_targetgroup ], }) const listener_https = elb . addListener ( 'Listener_https' , { port : 443 , open : true , certificates : [ elb_cert ], defaultTargetGroups : [ elb_targetgroup ], }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_http_rule' , { listener : listener_http , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) new aws_elasticloadbalancingv2 . ApplicationListenerRule ( this , 'listener_https_rule' , { listener : listener_https , priority : 10 , conditions : [ aws_elasticloadbalancingv2 . ListenerCondition . hostHeaders ( [ elb . loadBalancerDnsName , 'elb.wordpress-cdk.tk' , cloudfront . domainName ]) ], action : aws_elasticloadbalancingv2.ListenerAction.redirect ({ host : 'www.wordpress-cdk.tk' , permanent : true , }) }) // ***** // Route 53 // ***** new aws_route53 . ARecord ( this , 'elb-domain' , { zone : hostedzone , recordName : 'elb' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . LoadBalancerTarget ( elb )), }); new aws_route53 . ARecord ( this , 'cloudfront-domain' , { zone : hostedzone , recordName : 'www' , target : aws_route53.RecordTarget.fromAlias ( new aws_route53_targets . CloudFrontTarget ( cloudfront )), }); // ***** // CloudFormation Output // ***** new CfnOutput ( this , 'ec2-output' , { value : ec2.instancePublicIp }) new CfnOutput ( this , 'rds-output' , { value : rds.dbInstanceEndpointAddress , }) new CfnOutput ( this , 'secretsmanager-output' , { value : rds.secret ! . secretName }) new CfnOutput ( this , 'elb-output' , { value : elb.loadBalancerDnsName }) new CfnOutput ( this , 'cloudfront-output' , { value : cloudfront.distributionDomainName }) } } import { aws_certificatemanager , aws_route53 , Stack , StackProps } from \"aws-cdk-lib\" ; import { Construct } from \"constructs\" ; export class WordpressCdkUsEast1Stack extends Stack { constructor ( scope : Construct , id : string , props? : StackProps ) { super ( scope , id , props ); // ***** // Route 53 // ***** const hostedzone = aws_route53 . HostedZone . fromHostedZoneAttributes ( this , 'hostedzone' , { hostedZoneId : 'Z0364500207RRL1KGDBUZ' , zoneName : 'wordpress-cdk.tk' }) // ***** // Certificate Manager // ***** const cloudfront_cert = new aws_certificatemanager . Certificate ( this , 'cloudfront_cert' , { domainName : 'www.wordpress-cdk.tk' , validation : aws_certificatemanager.CertificateValidation.fromDns ( hostedzone ), }) } }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"setting-wordpress-https/","text":"AWS\u306e\u8a2d\u5b9a\u3092\u884c\u3063\u305f\u3060\u3051\u3067\u306fcss\u3084js\u306e\u30d5\u30a1\u30a4\u30eb\u304c http \u6307\u5b9a\u306e\u307e\u307e\u6b8b\u3063\u3066\u3057\u307e\u3044\u3001\u3044\u308f\u3086\u308b Mixed content(\u6df7\u5728\u30b3\u30f3\u30c6\u30f3\u30c4) \u306e\u72b6\u614b\u3068\u306a\u308a\u307e\u3059\u3002 Note \u6df7\u5728\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5371\u967a\u6027\u3084\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002 \u6df7\u5728\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u30d6\u30ed\u30c3\u30af | Firefox \u30d8\u30eb\u30d7 WordPress\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3044\u3001HTTPS\u5bfe\u5fdc\u3092\u884c\u3044\u307e\u3059\u3002 WordPress\u306e\u521d\u671f\u8a2d\u5b9a http://[ELB\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u540d] \u306b\u63a5\u7d9a \u3053\u3053\u3067\u306f\u307e\u3060http\u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u3092\u9032\u3081\u307e\u3059 RDS\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u5165\u529b\u3057\u307e\u3059 \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u6709\u52b9\u5316 \u521d\u671f\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059 Really Simple SSL \u3068\u3044\u3046\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u6709\u52b9\u5316\u3057\u307e\u3059 SSL\u3092\u6709\u52b9\u5316 \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059 \u8a2d\u5b9a\u304c\u7d42\u308f\u308b\u3068\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u9077\u79fb\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3067\u3059\u3002 https \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"HTTPS\u5316(WordPress\u306e\u8a2d\u5b9a)"},{"location":"setting-wordpress-https/#wordpress","text":"http://[ELB\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u540d] \u306b\u63a5\u7d9a \u3053\u3053\u3067\u306f\u307e\u3060http\u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 WordPress\u306e\u521d\u671f\u8a2d\u5b9a\u3092\u9032\u3081\u307e\u3059 RDS\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u5165\u529b\u3057\u307e\u3059","title":"WordPress\u306e\u521d\u671f\u8a2d\u5b9a"},{"location":"setting-wordpress-https/#_1","text":"\u521d\u671f\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059 Really Simple SSL \u3068\u3044\u3046\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u6709\u52b9\u5316\u3057\u307e\u3059 SSL\u3092\u6709\u52b9\u5316 \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059 \u8a2d\u5b9a\u304c\u7d42\u308f\u308b\u3068\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u9077\u79fb\u3057\u307e\u3059 \u4ee5\u4e0a\u3067\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3067\u3059\u3002 https \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u6709\u52b9\u5316"},{"location":"setting/","text":"\u4e8b\u524d\u8a2d\u5b9a AWS CLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html Node.js\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://nodejs.org/ja/download/ CDK SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bf\u30fc\u30df\u30ca\u30eb npm install -g aws-cdk AWS\u8a8d\u8a3c\u60c5\u5831\u306e\u8a2d\u5b9a \u30bf\u30fc\u30df\u30ca\u30eb aws configure AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: Default output format [None]: Note \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u3001 ~/.aws \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068VSCode\u4e0a\u306e .aws \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30ea\u30f3\u30af\u3059\u308bVSCode\u30bf\u30b9\u30af create symlnk .aws \u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"setting/#_1","text":"","title":"\u4e8b\u524d\u8a2d\u5b9a"},{"location":"setting/#aws-cli","text":"\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html","title":"AWS CLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"setting/#nodejs","text":"\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 https://nodejs.org/ja/download/","title":"Node.js\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"setting/#cdk-sdk","text":"\u30bf\u30fc\u30df\u30ca\u30eb npm install -g aws-cdk","title":"CDK SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"setting/#aws","text":"\u30bf\u30fc\u30df\u30ca\u30eb aws configure AWS Access Key ID [None]: AWS Secret Access Key [None]: Default region name [None]: Default output format [None]: Note \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u3001 ~/.aws \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068VSCode\u4e0a\u306e .aws \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30ea\u30f3\u30af\u3059\u308bVSCode\u30bf\u30b9\u30af create symlnk .aws \u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002","title":"AWS\u8a8d\u8a3c\u60c5\u5831\u306e\u8a2d\u5b9a"}]}